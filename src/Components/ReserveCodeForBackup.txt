// here we keep code befor update the code in case of data loss we get the previous running code from here

this is the Add Element Model Code from Admin Dashboard

  {/* Add Element Modal */}

        // this is the previous code with big cross button
      {/* <Modal
        open={open}
        onClose={() => {}} // Prevent closing when clicking outside
        closeAfterTransition
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            bgcolor: "#fff",
            boxShadow: 24,
            borderRadius: 3,
            p: 4,
            width: "60%",
            maxWidth: "800px", // Limit maximum width for better readability
            maxHeight: "80vh",
            overflowY: "auto",
            position: "relative", // Add relative positioning to position the close icon
          }}
        > */}
          {/* Close Icon in the top right corner */}
          {/* <IconButton
            onClick={handleClose} // Close the modal when clicked
            sx={{
              position: "absolute",
              top: 8,
              right: 8,
              color: "text.secondary", // Use a neutral color for the close button
              "&:hover": { backgroundColor: "rgba(0, 0, 0, 0.04)" }, // Subtle hover effect
            }}
          >
            <CloseIcon />
          </IconButton> */}

          {/* Add the form from AddElement */}
          {/* <AddElement
            handleClose={handleClose("AddElement")} // Pass the same handleClose function
            getAllData={getAllData}
          />
        </Box>
      </Modal>  */}

      //this is the running code of Add Element Model with new Changes 

       <Modal
        open={open}
        onClose={null} // Prevent closing when clicking outside
        closeAfterTransition
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            bgcolor: "#fff",
            boxShadow: 24,
            borderRadius: 3,
            p: 4,
            width: "60%",
            maxHeight: "80vh",
            overflowY: "auto",
            position: "relative", // Add relative positioning to position the close icon
          }}
        >
          {/* Close Icon in the top right corner */}
       <IconButton
            onClick={handleClose} // Close the modal when clicked
            sx={{
              position: "absolute",
              top: 8,
              right: 8,
              backgroundColor: "#f44336", // Red background for the close button
              color: "#fff",
              "&:hover": { backgroundColor: "#d32f2f" }, // Darken red on hover
            }}
          >
            <CloseIcon />
          </IconButton>

          {/* Add the form from AddElement */}
          <AddElement
            handleClose={() => handleClose("AddElement")}
            getAllData={getAllData}
          />
        </Box>
      </Modal>  


// this is the AddElement.jsx code for the backup 

// import React, { useEffect, useState } from "react";
// import { addItem } from "../../../Service/AdminServices"; // Import the service

// import {
//   Box,
//   Button,
//   TextField,
//   Grid2,
//   Select,
//   MenuItem,
//   FormControl,
//   InputLabel,
// } from "@mui/material";
// import Config from "../../../Service/Config";

// const AddElement = ({ handleClose, getAllData }) => {
//   const [category, setCategory] = useState("Category");
//   const [subCategory, setSubCategory] = useState("Sub Category");
//   const [formData, setFormData] = useState({
//     name: "",
//     description: "",
//     sap_no: "",
//     value: "",
//     manufacturer: "",
//     package_box: "",
//     location: "",
//     mpn: "",
//     stock: "",
//   });
//   const [errors, setErrors] = useState({
//     name: false,
//     description: false,
//     sap_no: false,
//     value: false,
//     manufacturer: false,
//     package_box: false,
//     location: false,
//     mpn: false,
//     stock: false,
//   });

//   const handleCategoryChange = (event) => {
//     setCategory(event.target.value);
//   };

//   const handleSubCategoryChange = (event) => {
//     setSubCategory(event.target.value);
//   };

//   const handleInputChange = (field) => (event) => {
//     setFormData({ ...formData, [field]: event.target.value });
//     setErrors({ ...errors, [field]: false }); // Reset error when user starts typing
//   };

//   const isFormValid = () => {
//     let valid = true;
//     const newErrors = { ...errors };

//     if (!formData.name.trim()) {
//       newErrors.name = true;
//       valid = false;
//     }
//     if (!formData.description.trim()) {
//       newErrors.description = true;
//       valid = false;
//     }
//     if (category === "Category") {
//       valid = false;
//     }
//     if (subCategory === "Sub Category") {
//       valid = false;
//     }
//     if (!formData.value.trim()) {
//       newErrors.value = true;
//       valid = false;
//     }
//     if (!formData.manufacturer.trim()) {
//       newErrors.manufacturer = true;
//       valid = false;
//     }
//     if (!formData.location.trim()) {
//       newErrors.location = true;
//       valid = false;
//     }
//     if (!formData.stock.trim()) {
//       newErrors.stock = true;
//       valid = false;
//     }

//     // No validation for MPN, SAP NO, and Package Box as they are now optional
//     setErrors(newErrors);
//     return valid;
//   };
//   useEffect(() => {
//     getAllData();
//   }, []);

//   const handleSubmit = async () => {
//     if (isFormValid()) {
//       // Prepare form data for API submission
//       const dataToSubmit = {
//         name: formData.name,
//         category: category,
//         subCategory: subCategory,
//         value: formData.value,
//         description: formData.description,
//         manufacturer: formData.manufacturer,
//         package_box: formData.package_box,
//         location: formData.location,
//         mpn: formData.mpn,
//         sap_no: formData.sap_no,
//         stock: formData.stock,
//       };

//       // Get token from session storage
//       const token = sessionStorage.getItem("token");

//       try {
//         // Make API call
//         const response = await fetch(`${Config.API_BASE_URL}item/add`, {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${token}`,
//           },
//           body: JSON.stringify(dataToSubmit),
//         });

//         if (!response.ok) {
//           throw new Error("Failed to submit the form");
//         }
//         getAllData();
//         handleClose();
//       } catch (error) {
//         console.error("Error submitting form:", error);
//         alert("An error occurred while submitting the form. Please try again.");
//       }
//     } else {
//       alert("Please fill out all mandatory fields.");
//     }
//   };

//   return (
//     <Box
//       sx={{
//         padding: 4,
//         backgroundColor: "#fff",
//         borderRadius: "8px",
//         boxShadow: 24,
//       }}
//     >
//       <Grid2 container spacing={3}>
//         <Grid2 item xs={12}>
//           <TextField
//             label="Asset Name"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.name}
//             onChange={handleInputChange("name")}
//             error={errors.name}
//             helperText={errors.name ? "Asset Name is required" : ""}
//           />
//         </Grid2>

//         <Grid2 item xs={12} sm={6}>
//           <TextField
//             label="Value"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.value}
//             onChange={handleInputChange("value")} // Handle value change
//             error={errors.value}
//             helperText={errors.value ? "Value is required" : ""}
//           />
//         </Grid2>

//         <Grid2 item xs={12}>
//           <TextField
//             label="Description"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.description}
//             onChange={handleInputChange("description")}
//             error={errors.description}
//             helperText={errors.description ? "Description is required" : ""}
//           />
//         </Grid2>

//         <Grid2 item xs={12} sm={6}>
//           <FormControl variant="outlined" fullWidth>
//             <InputLabel>Sub Category</InputLabel>
//             <Select
//               value={subCategory}
//               onChange={handleSubCategoryChange}
//               label="Sub Category"
//             >
//               <MenuItem value="Sub Category" disabled>
//                 Sub Category
//               </MenuItem>
//               <MenuItem value="Electronics">Electronics</MenuItem>
//               <MenuItem value="Mechanics">Tools & Instruments</MenuItem>
//             </Select>
//           </FormControl>
//         </Grid2>

//         <Grid2 item xs={12} sm={6}>
//           <FormControl variant="outlined" fullWidth>
//             <InputLabel>Category</InputLabel>
//             <Select
//               value={category}
//               onChange={handleCategoryChange}
//               label="Category"
//             >
//               <MenuItem value="Category" disabled>
//                 Category
//               </MenuItem>
//               <MenuItem value="Asset">Asset</MenuItem>
//               <MenuItem value="Component">Component</MenuItem>
//             </Select>
//           </FormControl>
//         </Grid2>

//         <Grid2 item xs={12} sm={6}>
//           <TextField
//             label="Manufacturer"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.manufacturer}
//             onChange={handleInputChange("manufacturer")}
//             error={errors.manufacturer}
//             helperText={errors.manufacturer ? "Manufacturer is required" : ""}
//           />
//         </Grid2>

//         <Grid2 item xs={12} sm={6}>
//           <TextField
//             label="Location"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.location}
//             onChange={handleInputChange("location")}
//             error={errors.location}
//             helperText={errors.location ? "Location is required" : ""}
//           />
//         </Grid2>

//         <Grid2 item xs={12} sm={6}>
//           <TextField
//             label="Package Box"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.package_box}
//             onChange={handleInputChange("package_box")}
//             error={errors.package_box}
//             helperText={errors.package_box ? "Package Box is required" : ""}
//           />
//         </Grid2>

//         <Grid2 item xs={12} sm={6}>
//           <TextField
//             label="MPN"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.mpn}
//             onChange={handleInputChange("mpn")}
//             // error={errors.mpn}
//             // helperText={errors.mpn ? "MPN is required" : ""}
//           />
//         </Grid2>
//         <Grid2 item xs={12} sm={6}>
//           <TextField
//             label="SAP NO"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.sap_no}
//             onChange={handleInputChange("sap_no")}
//             error={errors.sap_no}
//             helperText={errors.sap_no ? "SAP NO is required" : ""}
//           />
//         </Grid2>
//         <Grid2 item xs={12} sm={6}>
//           <TextField
//             label="Stock"
//             variant="outlined"
//             fullWidth
//             sx={{ borderRadius: "8px", backgroundColor: "#f5f5f5" }}
//             value={formData.stock}
//             onChange={handleInputChange("stock")}
//             error={errors.stock}
//             helperText={errors.stock ? "Stock is required" : ""}
//           />
//         </Grid2>
//       </Grid2>

//       {/* Save Button */}
//       <Box textAlign="center" mt={4}>
//         <Button
//           variant="contained"
//           color="primary"
//           size="large"
//           sx={{
//             borderRadius: "8px",
//             "&:hover": { backgroundColor: "#1976d2" }, // Darken the button color on hover
//           }}
//           onClick={handleSubmit}
//         >
//           Save
//         </Button>
//       </Box>
//     </Box>
//   );
// };

// export default AddElement;


import React, { useEffect, useState } from "react";
import { addItem } from "../../../Service/AdminServices"; // Import the service
import {
  Box,
  Button,
  TextField,
  Grid,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Typography,
} from "@mui/material";
import Config from "../../../Service/Config";

const AddElement = ({ handleClose, getAllData }) => {
  const [category, setCategory] = useState("Category");
  const [subCategory, setSubCategory] = useState("Sub Category");
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    sap_no: "",
    value: "",
    manufacturer: "",
    package_box: "",
    location: "",
    mpn: "",
    stock: "",
  });
  const [errors, setErrors] = useState({
    name: false,
    description: false,
    sap_no: false,
    value: false,
    manufacturer: false,
    package_box: false,
    location: false,
    mpn: false,
    stock: false,
  });

  const handleCategoryChange = (event) => {
    setCategory(event.target.value);
  };

  const handleSubCategoryChange = (event) => {
    setSubCategory(event.target.value);
  };

  const handleInputChange = (field) => (event) => {
    setFormData({ ...formData, [field]: event.target.value });
    setErrors({ ...errors, [field]: false }); // Reset error when user starts typing
  };

  const isFormValid = () => {
    let valid = true;
    const newErrors = { ...errors };

    if (!formData.name.trim()) {
      newErrors.name = true;
      valid = false;
    }
    if (!formData.description.trim()) {
      newErrors.description = true;
      valid = false;
    }
    if (category === "Category") {
      valid = false;
    }
    if (subCategory === "Sub Category") {
      valid = false;
    }
    if (!formData.value.trim()) {
      newErrors.value = true;
      valid = false;
    }
    if (!formData.manufacturer.trim()) {
      newErrors.manufacturer = true;
      valid = false;
    }
    if (!formData.location.trim()) {
      newErrors.location = true;
      valid = false;
    }
    if (!formData.stock.trim()) {
      newErrors.stock = true;
      valid = false;
    }

    setErrors(newErrors);
    return valid;
  };

  useEffect(() => {
    getAllData();
  }, []);


  
  const handleSubmit = async () => {
    if (isFormValid()) {
      const dataToSubmit = {
        name: formData.name,
        category: category,
        subCategory: subCategory,
        value: formData.value,
        description: formData.description,
        manufacturer: formData.manufacturer,
        package_box: formData.package_box,
        location: formData.location,
        mpn: formData.mpn,
        sap_no: formData.sap_no,
        stock: formData.stock,
      };

      const token = sessionStorage.getItem("token");

      try {
        const response = await fetch(`${Config.API_BASE_URL}item/add`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(dataToSubmit),
        });

        if (!response.ok) {
          throw new Error("Failed to submit the form");
        }
        getAllData();
        handleClose(); // Close the modal after successful submission
      } catch (error) {
        console.error("Error submitting form:", error);
        alert("An error occurred while submitting the form. Please try again.");
      }
    } else {
      alert("Please fill out all mandatory fields.");
    }
  };

  return (
    <Box
      sx={{
        padding: 3,
        backgroundColor: "#fff",
        borderRadius: "8px",
        width: "100%",
        maxWidth: "600px",
        margin: "auto",
      }}
    >
      <Typography variant="h6" sx={{ mb: 3, textAlign: "center" }}>
        Add New Element
      </Typography>

      <Grid container spacing={2}>
        {/* Form fields remain the same */}
        <Grid item xs={12}>
          <TextField
            label="Asset Name"
            variant="outlined"
            fullWidth
            value={formData.name}
            onChange={handleInputChange("name")}
            error={errors.name}
            helperText={errors.name ? "Asset Name is required" : ""}
          />
        </Grid>

        <Grid item xs={12} sm={6}>
          <TextField
            label="Value"
            variant="outlined"
            fullWidth
            value={formData.value}
            onChange={handleInputChange("value")}
            error={errors.value}
            helperText={errors.value ? "Value is required" : ""}
          />
        </Grid>

        <Grid item xs={12}>
          <TextField
            label="Description"
            variant="outlined"
            fullWidth
            value={formData.description}
            onChange={handleInputChange("description")}
            error={errors.description}
            helperText={errors.description ? "Description is required" : ""}
          />
        </Grid>

        <Grid item xs={12} sm={6}>
          <FormControl variant="outlined" fullWidth>
            <InputLabel>Sub Category</InputLabel>
            <Select
              value={subCategory}
              onChange={handleSubCategoryChange}
              label="Sub Category"
            >
              <MenuItem value="Sub Category" disabled>
                Sub Category
              </MenuItem>
              <MenuItem value="Electronics">Electronics</MenuItem>
              <MenuItem value="Mechanics">Tools & Instruments</MenuItem>
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} sm={6}>
          <FormControl variant="outlined" fullWidth>
            <InputLabel>Category</InputLabel>
            <Select
              value={category}
              onChange={handleCategoryChange}
              label="Category"
            >
              <MenuItem value="Category" disabled>
                Category
              </MenuItem>
              <MenuItem value="Asset">Asset</MenuItem>
              <MenuItem value="Component">Component</MenuItem>
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={12} sm={6}>
          <TextField
            label="Manufacturer"
            variant="outlined"
            fullWidth
            value={formData.manufacturer}
            onChange={handleInputChange("manufacturer")}
            error={errors.manufacturer}
            helperText={errors.manufacturer ? "Manufacturer is required" : ""}
          />
        </Grid>

        <Grid item xs={12} sm={6}>
          <TextField
            label="Location"
            variant="outlined"
            fullWidth
            value={formData.location}
            onChange={handleInputChange("location")}
            error={errors.location}
            helperText={errors.location ? "Location is required" : ""}
          />
        </Grid>

        <Grid item xs={12} sm={6}>
          <TextField
            label="Package Box"
            variant="outlined"
            fullWidth
            value={formData.package_box}
            onChange={handleInputChange("package_box")}
            error={errors.package_box}
            helperText={errors.package_box ? "Package Box is required" : ""}
          />
        </Grid>

        <Grid item xs={12} sm={6}>
          <TextField
            label="MPN"
            variant="outlined"
            fullWidth
            value={formData.mpn}
            onChange={handleInputChange("mpn")}
          />
        </Grid>

        <Grid item xs={12} sm={6}>
          <TextField
            label="SAP NO"
            variant="outlined"
            fullWidth
            value={formData.sap_no}
            onChange={handleInputChange("sap_no")}
            error={errors.sap_no}
            helperText={errors.sap_no ? "SAP NO is required" : ""}
          />
        </Grid>

        <Grid item xs={12} sm={6}>
          <TextField
            label="Stock"
            variant="outlined"
            fullWidth
            value={formData.stock}
            onChange={handleInputChange("stock")}
            error={errors.stock}
            helperText={errors.stock ? "Stock is required" : ""}
          />
        </Grid>
      </Grid>

      {/* Save Button */}
      <Box textAlign="center" mt={3}>
        <Button
          variant="contained"
          color="primary"
          size="large"
          onClick={handleSubmit}
          sx={{ width: "100%", maxWidth: "200px" }}
        >
          Save
        </Button>
      </Box>
    </Box>
  );
};

export default AddElement;


Light Keyboard	052	Hp Keyboard with led Light	Tools and Instruments	Hp	Emerging Technology	C33SB2	B45A23	136497	15		



//this is Available form old renning code
//latest code
import React, { useState, useEffect } from "react";
import {
  Grid,
  Modal,
  Box,
  TextField,
  Button,
  IconButton,
  Typography,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import { requestItem } from "../../../Service/services";

const Available = ({ open, handleClose, data, getAllData }) => {
  const [formData, setFormData] = useState(data);
  const [availableForm, setAvailableForm] = useState({
    userName: sessionStorage.getItem("Name"),
  });
  const [errors, setErrors] = useState({});

  useEffect(() => {
    setFormData(data);
  }, [data]);

  const handleChange = (ProductItem) => {
    setAvailableForm({
      ...availableForm,
      [ProductItem.name]: ProductItem.value,
    });
  };

  const validate = () => {
    let tempErrors = {};

    if (
      !availableForm.quantityRequested ||
      availableForm.quantityRequested < 1
    ) {
      tempErrors.quantityRequested = "Quantity requested must be at least 1";
    } else if (availableForm.quantityRequested > formData?.stock) {
      tempErrors.quantityRequested =
        "Requested quantity exceeds available stock";
    }

    if (!availableForm.projectName)
      tempErrors.projectName = "Project name is required";
    if (!availableForm.remark) tempErrors.remark = "Remark is required";

    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validate()) return;

    try {
      const dataToUpload = { id: data.id, ...availableForm };
      console.log("formdata is ", dataToUpload);
      await requestItem(dataToUpload);
      handleClose();
      alert("Request added successfully!");

      // Call the parent function to fetch updated data
      getAllData();
    } catch (error) {
      console.error("Error updating item:", error);
    }
  };

  return (
    <Modal open={open} onClose={handleClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          bgcolor: "white",
          boxShadow: 24,
          p: 4,
          width: "60%",
          borderRadius: 3,
        }}
      >
        <Typography variant="h6" mb={2}>
          Issue Item
        </Typography>
        <IconButton
          onClick={handleClose}
          sx={{
            position: "absolute",
            top: 8,
            right: 8,
            backgroundColor: "#f44336",
            color: "#fff",
            "&:hover": { backgroundColor: "#d32f2f" },
          }}
        >
          <CloseIcon />
        </IconButton>
        <Grid container spacing={2}>
          <Grid item xs={12}>
            <Box sx={{ mb: 3 }}>
              <Typography
                variant="h6"
                sx={{ fontWeight: "bold", color: "primary.main" }}
              >
                Component Name: {formData?.name}
              </Typography>
              <Typography
                variant="body1"
                sx={{ color: "text.secondary", marginTop: 1 }}
              >
                Value: {formData?.value}
              </Typography>
              <Typography
                variant="body2"
                sx={{ color: "text.primary", marginTop: 1 }}
              >
                Specification: {formData?.description}
              </Typography>
            </Box>
            <TextField
              name="stock"
              label="Requested Quantity"
              value={availableForm?.quantityRequested}
              onChange={(e) =>
                handleChange({
                  name: "quantityRequested",
                  value: e.target.value,
                })
              }
              error={!!errors.quantityRequested}
              helperText={errors.quantityRequested}
              sx={{ mb: 2, width: "100%" }}
              required
            />
            <TextField
              name="projectName"
              label="Project Name"
              value={availableForm?.projectName}
              onChange={(e) =>
                handleChange({ name: "projectName", value: e.target.value })
              }
              error={!!errors.projectName}
              helperText={errors.projectName}
              required
              sx={{ mb: 2, width: "100%" }}
            />
            <TextField
              name="Remark"
              label="Remark"
              value={availableForm?.remark}
              onChange={(e) =>
                handleChange({ name: "remark", value: e.target.value })
              }
              error={!!errors.remark}
              helperText={errors.remark}
              sx={{ mb: 2, width: "100%" }}
              required
            />
          </Grid>
        </Grid>

        <Box display="flex" justifyContent="space-between" mt={2}>
          <Button variant="contained" color="primary" onClick={handleSave}>
            Save
          </Button>
        </Box>
      </Box>
    </Modal>
  );
};

export default Available;


// This is my Dashboard code 

//latest
import React, { useEffect, useState } from "react";
import {  AppBar,  Toolbar,  Typography, Badge ,IconButton,  Select,  MenuItem,  TextField,  Button,  Modal,  Box,  Menu,} from "@mui/material";
import ChangePasswordModal from "../../../Components/ChangePasswordModal";
import NotificationsIcon from "@mui/icons-material/Notifications";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import FilterListIcon from "@mui/icons-material/FilterList";
import ViewListIcon from "@mui/icons-material/ViewList";
import ceinsys_logo from "../../Image/ceinsys_logo.png";
import AddElement from "../dashboard/AddElement";
import HistoryCards from "../dashboard/HistoryCards";
import RequestHistoryModal from "./RequestHistoryModel";
import CloseIcon from "@mui/icons-material/Close";
import EditForm from "./EditForm";
import { useNavigate } from "react-router-dom";
import Available from "./Available";
import { getAllData, changePassword } from "../../../Service/DashboardService";
import ItemTable from "../../../Components/ItemTable";
import { applyFilters } from "../../../Components/utils/Filters";
import { fetchNewRequests } from "../../../Service/DashboardService";
import HistoryTable from "../../../Components/HistoryTable";

const Dashboard2 = () => {
  const navigate = useNavigate();

  // State variables
  const [open, setOpen] = useState(false);
  const [openEditForm, setOpenEditForm] = useState(false);
  const [openAvailableForm, setOpenAvailableForm] = useState(false);
  const [openHistoryCards, setHistoryCards] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const [parentTableData, setParentTableData] = useState([]);
  const [tableData, setTableData] = useState([]);
  const [selectedSubCategory, setSelectedSubCategory] = useState("All");
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [searchValue, setSearchValue] = useState("");
  const [selectedItem, setSelectedItem] = useState({});
  const [anchorElLogout, setAnchorElLogout] = useState(null);
  const [openChangePasswordModal, setOpenChangePasswordModal] = useState(false);
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState(""); // Error state for password mismatch
  const [anchorElProfile, setAnchorElProfile] = useState(null); // Profile dropdown
  const [openModal, setOpenModal] = useState(false);
  const [hasNewRequests, setHasNewRequests] = useState(false);
  const [openHistoryModal, setOpenHistoryModal] = useState(false);
  // Fetch data
  const fetchData = async () => {
    try {
      const data = await getAllData();
      setParentTableData(data);
      setTableData(data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  //request history model
  const handleOpenModal = () => {
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
  };

  // Open User History Modal
  const handleHistoryClick = () => {
    setOpenHistoryModal(true);
  };

  // Close User History Modal
  const handleCloseHistoryModal = () => {
    setOpenHistoryModal(false);
  };

  // Handlers
  const handleMenuOpenLogout = (event) => {
    setAnchorElLogout(event.currentTarget);
  };

  const handleMenuCloseLogout = () => {
    setAnchorElLogout(null);
  };

  const handleCategoryAndSubCategoryChange = (event, type) => {
    if (type === "subCategory") {
      const category = event.target.value;
      setSelectedSubCategory(category);
    } else {
      const category = event;
      setSelectedCategory(category);
    }
  };

  const handleSearchChange = (e) => {
    const value = e.target.value.toLowerCase();
    setSearchValue(value);
  };

  // Effect for filtering table data based on selected category, subcategory, and search value
  useEffect(() => {
    const filteredData = applyFilters(
      parentTableData,
      selectedCategory,
      selectedSubCategory,
      searchValue
    );
    setTableData(filteredData);
  }, [selectedCategory, selectedSubCategory, searchValue, parentTableData]);

  const handleLogoutClick = () => {
    // Clear session and local storage
    sessionStorage.clear();
    localStorage.clear();

    // Perform additional logout actions if needed, such as redirecting
    console.log("Logged out successfully");
    navigate("/login");
    handleMenuCloseLogout();
  };

  //Notification for new requests
  useEffect(() => {
    const fetchData = async () => {
      const result = await fetchNewRequests();
      setHasNewRequests(result);
    };

    fetchData(); // Fetch on component mount
    // const interval = setInterval(fetchData, 5000); // Poll every 5 seconds
    // return () => clearInterval(interval); // Cleanup on unmount
  }, []);

  // Handle Modal Open and Close
  const handleOpen = () => setOpen(true);
  const handleClose = (propertyName) => {
    if (propertyName === "EditForm") {
      setOpenEditForm(false);
    } else if (propertyName === "AvailableForm") {
      setOpenAvailableForm(false);
    } else if (propertyName === "HistoryCards") {
      setHistoryCards(false);
    } else {
      setOpen(false);
    }
  };

  // Menu Item Selection
  const handleMenuOpen = (event) => setAnchorEl(event.currentTarget);
  const handleMenuClose = () => setAnchorEl(null);

  // const handleCategorySelect = (category) => {
  //   setSelectedCategory(category);
  //   handleMenuClose();
  // };

  useEffect(() => {
    fetchData();
  }, []);

  // change password
  const handleProfileMenuOpen = (event) => {
    setAnchorElProfile(event.currentTarget);
  };
  const handleProfileMenuClose = () => {
    setAnchorElProfile(null);
  };

  // Open Change Password Modal
  const handleOpenChangePasswordModal = () => {
    setOpenChangePasswordModal(true);
    handleProfileMenuClose(); // Close profile menu when opening modal
  };

  // Close Change Password Modal
  const handleCloseChangePasswordModal = () => {
    setOpenChangePasswordModal(false);
  };
  // Handle Change Password Submit
  const handleChangePasswordSubmit = async () => {
    if (newPassword !== confirmPassword) {
      setError("New password and Confirm password do not match!");
      return;
    }

    try {
      await changePassword(oldPassword, newPassword);
      alert("Password changed successfully"); // Show success alert
      handleCloseChangePasswordModal(); // Close modal after success
    } catch (error) {
      console.error("Failed to change password:", error);
      alert("Error changing password. Please try again.");
    }
  };

  return (
    <div
      style={{
        height: "100vh",
        overflow: "hidden",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <div
        style={{
          position: "sticky",
          top: 0,
          zIndex: 1000,
          backgroundColor: "#fff",
        }}
      >
        {/* Top App Bar */}
        <AppBar position="fixed" sx={{ backgroundColor: "#3B92CD" }}>
          <Toolbar style={{ display: "flex", justifyContent: "space-between" }}>
            {/* Left Section */}
            <img
              src={ceinsys_logo}
              alt="Ceinsys Logo"
              style={{ height: "40px", marginRight: "16px" }}
            />
            <div
              style={{
                display: "flex",
                alignItems: "center",
                gap: "30px",
                marginLeft: "140px",
              }}
            >
              <Button color="inherit" onClick={handleMenuOpen}>
                {selectedCategory}
              </Button>
              <Menu
                anchorEl={anchorEl}
                open={Boolean(anchorEl)}
                onClose={handleMenuClose}
              >
                <MenuItem
                  onClick={(e) => {
                    handleCategoryAndSubCategoryChange("All", "Category");
                  }}
                >
                  All
                </MenuItem>
                <MenuItem
                  onClick={(e) => {
                    handleCategoryAndSubCategoryChange("Asset", "Category");
                  }}
                >
                  Asset
                </MenuItem>
                <MenuItem
                  onClick={(e) => {
                    handleCategoryAndSubCategoryChange("Component", "Category");
                  }}
                >
                  Component
                </MenuItem>
              </Menu>
              <Button color="inherit" onClick={handleOpenModal}>
                Activity Log
              </Button>

              <Button color="inherit" onClick={handleOpen}>
                Add Item
              </Button>
              <Button
                color="inherit"
                onClick={() => {
                  setHistoryCards(true);
                }}
              >
                Manage Requests
              </Button>
              <Button color="inherit" onClick={handleHistoryClick}>
                My History
              </Button>
              <Typography color="inherit" style={{ marginRight: "16px" }}>
                Contact Us: contact@ceinsys.com
              </Typography>
            </div>

            {/* Right Section */}
            <div>
              <IconButton color="inherit">
                <Badge color="error" variant="dot" invisible={!hasNewRequests}>
                  <NotificationsIcon />
                </Badge>
              </IconButton>

              {/* Profile Icon - Handles Change Password */}
              <IconButton color="inherit" onClick={handleProfileMenuOpen}>
                <AccountCircleIcon />
              </IconButton>

              {/* Change Password Dropdown Menu */}
              <Menu
                anchorEl={anchorElProfile}
                open={Boolean(anchorElProfile)}
                onClose={handleProfileMenuClose}
              >
                <MenuItem onClick={handleOpenChangePasswordModal}>
                  Change Password
                </MenuItem>
                <MenuItem onClick={handleLogoutClick}>Logout</MenuItem>
              </Menu>

              <ChangePasswordModal
                open={openChangePasswordModal}
                onClose={handleCloseChangePasswordModal}
                onSubmit={handleChangePasswordSubmit}
                oldPassword={oldPassword}
                setOldPassword={setOldPassword}
                newPassword={newPassword}
                setNewPassword={setNewPassword}
                confirmPassword={confirmPassword}
                setConfirmPassword={setConfirmPassword}
                error={error}
              />
            </div>
          </Toolbar>
        </AppBar>

        {/* Welcome Section */}
        <div
          style={{
            marginTop: "60px",
            padding: "16px",
            backgroundColor: "#A8D2EF",
          }}
        >
          <Typography variant="h5">
            Welcome {sessionStorage.getItem("Name")}
          </Typography>
          <div
            style={{
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              marginTop: "12px",
              backgroundColor: "#f5f5f5",
              padding: "8px 12px",
              borderRadius: "8px",
            }}
          >
            <div style={{ display: "flex", alignItems: "center", gap: "16px" }}>
              <Select
                defaultValue="All"
                value={selectedSubCategory}
                onChange={(e) => {
                  handleCategoryAndSubCategoryChange(e, "subCategory");
                }}
                style={{ marginRight: "16px", width: "120px" }}
              >
                <MenuItem value="All">All</MenuItem>
                <MenuItem value="Electronics">Electronics</MenuItem>
                <MenuItem value="Mechanics">Tools & Instruments</MenuItem>
              </Select>
              <TextField
                variant="outlined"
                placeholder="Search"
                size="small"
                style={{ marginRight: "16px" }}
                value={searchValue}
                onChange={handleSearchChange}
                autoComplete="off"
                inputProps={{
                  autoComplete: "off",
                  name: "searchInput", // Change input name to a non-common name
                  id: "searchInput", // Ensure unique ID to prevent browser autofill tracking
                }}
                onFocus={(e) => e.target.setAttribute("autocomplete", "off")} // Prevents autofill on focus
              />
            </div>
            <div>
              <IconButton color="primary">
                <FilterListIcon />
              </IconButton>
              <IconButton color="primary">
                <ViewListIcon />
              </IconButton>
            </div>
          </div>
        </div>
      </div>
      {/* Table Section with Fixed Header */}
      <div
        style={{
          marginTop: "10px", // Make sure it starts below the welcome message
          padding: "16px",
        }}
      >
        <ItemTable
          tableData={tableData}
          setSelectedItem={setSelectedItem}
          setOpenAvailableForm={setOpenAvailableForm}
          setOpenEditForm={setOpenEditForm}
        />
      </div>
      {/* Add Element Modal  new code */}
      <Modal
        open={open}
        onClose={null} // Prevent closing when clicking outside
        closeAfterTransition
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            bgcolor: "#fff",
            boxShadow: 24,
            borderRadius: 3,
            p: 3,
            width: "100%",
            maxWidth: "600px", // Match AddElement width
            maxHeight: "80vh", // Adjust height
            overflowY: "auto",
            position: "relative",
          }}
        >
          {/* Close Icon in the top right corner */}
          <IconButton
            onClick={handleClose}
            sx={{
              position: "absolute",
              top: 8,
              right: 8,
              color: "gray", // Subtle color
              "&:hover": { backgroundColor: "#f0f0f0" }, // Light hover effect
            }}
          >
            <CloseIcon fontSize="small" />
          </IconButton>

          {/* AddElement Form */}
          <AddElement
            handleClose={() => {
              handleClose("AddElement");
              getAllData(); // Refresh dashboard data automatically
            }}
            getAllData={getAllData}
          />
        </Box>
      </Modal>
      {/* History Cards Modal */}
      <Modal
        open={openHistoryCards}
        onClose={null} // Prevent closing when clicking outside
        closeAfterTransition
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            bgcolor: "#fff",
            boxShadow: 24,
            borderRadius: 3,
            p: 4,
            width: "60%",
            maxHeight: "80vh",
            overflowY: "auto",
            position: "relative", // Add relative positioning to position the close icon
          }}
        >
          {/* Close Icon in the top right corner */}
          <IconButton
            onClick={() => handleClose("HistoryCards")} // Close the modal when clicked
            sx={{
              position: "absolute",
              top: 8,
              right: 8,
              backgroundColor: "#f44336", // Red background for the close button
              color: "#fff",
              "&:hover": { backgroundColor: "#d32f2f" }, // Darken red on hover
            }}
          >
            <CloseIcon />
          </IconButton>

          {/* Add the form from AddElement */}
          <HistoryCards
            handleClose={() => handleClose("AddElement")}
            getAllData={getAllData}
            data={selectedItem}
          />
        </Box>
      </Modal>
      <EditForm
        open={openEditForm}
        data={selectedItem}
        handleClose={() => handleClose("EditForm")}
        getAllData={getAllData}
      />
      <Available
        open={openAvailableForm}
        data={selectedItem}
        handleClose={() => handleClose("AvailableForm")}
        getAllData={getAllData}
      />

      <RequestHistoryModal open={openModal} handleClose={handleCloseModal} />
      <Modal
        open={openHistoryModal}
        aria-labelledby="history-modal-title"
        aria-describedby="history-modal-description"
        disableEscapeKeyDown
        sx={{
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
        }}
      >
        <Box
          sx={{
            width: "80%",
            maxWidth: "1200px",
            height: "auto",
            maxHeight: "80vh",
            bgcolor: "background.paper",
            boxShadow: 24,
            borderRadius: "8px",
            display: "flex",
            flexDirection: "column",
            p: 4,
          }}
        >
          <Typography variant="h6" id="history-modal-title" gutterBottom>
            User History
          </Typography>

          <HistoryTable onClose={handleCloseHistoryModal} />
        </Box>
      </Modal>
    </div>
  );
};

export default Dashboard2;








//Purchese Request
import React, { useEffect, useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TableContainer,
  Paper,
  Button,
  Typography,
  Box,
} from "@mui/material";
import axios from "axios";
import Config from "../../../Service/Config";

const HistoryCards = ({ getAllData, handleClose, data }) => {
  const [requests, setRequests] = useState([]);
  const [error, setError] = useState(null);
  const [fromData, setFormData] = useState(data);

  // Fetch data on component mount
  const fetchRequests = async () => {
    const token = sessionStorage.getItem("token");
    try {
      const response = await axios.get(
        `${Config.API_BASE_URL}request/getAllNonApprovedRequests`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      setRequests(response.data);
    } catch (err) {
      console.error("Error fetching requests:", err);
      setError("No Request Available.");
    }
  };

  useEffect(() => {
    setFormData(data); // Update formData when data changes
  }, [data]);

  useEffect(() => {
    fetchRequests();
  }, []);

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  // Approve request handler
  const handleApprove = async (id) => {
    const token = sessionStorage.getItem("token");
    const userName = sessionStorage.getItem("Name");

    try {
      const response = await axios.post(
        `${
          Config.API_BASE_URL
        }request/approved?requestId=${id}&adminName=${encodeURIComponent(
          userName
        )}`,
        {},
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.status === 200) {
        alert("Request approved successfully!");

        // Optimistically update the state
        setRequests((prevRequests) =>
          prevRequests.filter((request) => request.id !== id)
        );
      } else {
        alert("Failed to approve request. Please try again.");
      }
    } catch (error) {
      console.error("Error approving the request:", error);
      alert(
        "Error occurred while approving the request. Please try again later."
      );
    }
  
  };

  // Deny request handler
  const handleDeny = async (id) => {
    const token = sessionStorage.getItem("token");
    const userName = sessionStorage.getItem("Name"); // Fetch adminName from sessionStorage

    try {
      const response = await axios.delete(
        `${
          Config.API_BASE_URL
        }request/deleteRequest?requestId=${id}&adminName=${encodeURIComponent(
          userName
        )}`,
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.status === 200) {
        alert("Request denied successfully!");

        // Optimistically update the state
        setRequests((prevRequests) =>
          prevRequests.filter((request) => request.id !== id)
        );
      } else {
        alert("Failed to deny request. Please try again.");
      }
    } catch (error) {
      console.error("Error denying the request:", error);
      alert(
        "Error occurred while denying the request. Please try again later."
      );
    }
  };

  return (
    <Paper style={{ padding: "20px" }}>
      <TableContainer>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Value</TableCell>
              <TableCell>Description</TableCell>
              <TableCell>Quantity Requested</TableCell>
              <TableCell>Date</TableCell>
              <TableCell>User Name</TableCell>
              <TableCell>Project Name</TableCell>
              <TableCell>Remark</TableCell>
              <TableCell>Approved</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {requests.map((request) => (
              <TableRow key={request.id}>
                <TableCell>{request.item.name}</TableCell>
                <TableCell>{request.item.value}</TableCell>
                <TableCell>{request.item.description}</TableCell>
                <TableCell>{request.quantityRequest}</TableCell>
                <TableCell>
                  {new Date(request.localDateTime).toLocaleString()}
                </TableCell>
                <TableCell>{request.userName}</TableCell>
                <TableCell>{request.projectName}</TableCell>
                <TableCell>{request.remark}</TableCell>
                <TableCell>{request.approved ? "Yes" : "No"}</TableCell>
                <TableCell>
                  <Box display="flex" gap={1}>
                    <Button
                      variant="contained"
                      color="success"
                      onClick={() => handleApprove(request.id)}
                      style={{ width: "100px" }}
                    >
                      Approve
                    </Button>
                    <Button
                      variant="contained"
                      color="error"
                      onClick={() => handleDeny(request.id)}
                      style={{ width: "100px" }}
                    >
                      Deny
                    </Button>
                  </Box>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
};

export default HistoryCards;

// import React, { useEffect, useState } from "react";
// import {
//   Table,
//   TableBody,
//   TableCell,
//   TableHead,
//   TableRow,
//   TableContainer,
//   Paper,
//   Button,
//   Typography,
//   Box,
// } from "@mui/material";
// import axios from "axios";
// import Config from "../../../Service/Config";

// const HistoryCards = ({ getAllData, handleClose, data }) => {
//   const [requests, setRequests] = useState([]);
//   const [error, setError] = useState(null);
//   const [fromData, setFormData] = useState(data);

//   // Fetch data on component mount
//   const fetchRequests = async () => {
//     const token = sessionStorage.getItem("token");
//     try {
//       const response = await axios.get(
//         // `${Config.API_BASE_URL}item/getAllNonApprovedRequests`,
//         `${Config.API_BASE_URL}request/getAllNonApprovedRequests`,
//         {
//           headers: {
//             Authorization: `Bearer ${token}`,
//             "Content-Type": "application/json",
//           },
//         }
//       );

//       setRequests(response.data);
//     } catch (err) {
//       console.error("Error fetching requests:", err);
//       setError("Failed to fetch data. Please try again later.");
//     }
//     getAllData();
//   };

//   useEffect(() => {
//     setFormData(data); // Update formData when data changes
//   }, [data]);

//   useEffect(() => {
//     fetchRequests();
//   }, []);

//   if (error) {
//     return <Typography color="error">{error}</Typography>;
//   }

//   // Approve request handler
//   const handleApprove = async (id) => {
//     const token = sessionStorage.getItem("token");

//     try {
//       const response = await axios.post(
//         `${Config.API_BASE_URL}request/approved?requestId=${id}`,
//         {},
//         {
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );

//       if (response.status === 200) {
//         alert("Request approved successfully!");

//         // Optimistically update the state
//         setRequests((prevRequests) =>
//           prevRequests.filter((request) => request.id !== id)
//         );
//       } else {
//         alert("Failed to approve request. Please try again.");
//       }
//     } catch (error) {
//       console.error("Error approving the request:", error);
//       alert(
//         "Error occurred while approving the request. Please try again later."
//       );
//     }
//     getAllData();
//   };

//   // Deny request handler
//   const handleDeny = async (id) => {
//     const token = sessionStorage.getItem("token");

//     try {
//       const response = await axios.delete(
//         // `${Config.API_BASE_URL}item/deleteRequest?requestId=${id}`,
//         `${Config.API_BASE_URL}request/deleteRequest?requestId=${id}`,
//         {
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );

//       if (response.status === 200) {
//         alert("Request denied successfully!");

//         // Optimistically update the state
//         setRequests((prevRequests) =>
//           prevRequests.filter((request) => request.id !== id)
//         );
//       } else {
//         alert("Failed to deny request. Please try again.");
//       }
//     } catch (error) {
//       console.error("Error denying the request:", error);
//       alert(
//         "Error occurred while denying the request. Please try again later."
//       );
//     }
//   };

//   return (
//     <Paper style={{ padding: "20px" }}>
//       <TableContainer>
//         <Table stickyHeader>
//           <TableHead>
//             <TableRow>
//               {/* <TableCell>Request ID</TableCell> */}
//               <TableCell>Name</TableCell>
//               <TableCell>Value</TableCell>
//               <TableCell>Description</TableCell>
//               <TableCell>Quantity Requested</TableCell>
//               <TableCell>Date</TableCell>
//               <TableCell>User Name</TableCell>
//               <TableCell>Project Name</TableCell>
//               <TableCell>Remark</TableCell>
//               <TableCell>Approved</TableCell>
//               <TableCell>Actions</TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {requests.map((request) => (
//               <TableRow key={request.id}>
//                 {/* <TableCell>{request.id}</TableCell> */}
//                 <TableCell>{request.item.name}</TableCell>
//                 <TableCell>{request.item.value}</TableCell>
//                 <TableCell>{request.item.description}</TableCell>
//                 <TableCell>{request.quantityRequest}</TableCell>
//                 <TableCell>
//                   {new Date(request.localDateTime).toLocaleString()}
//                 </TableCell>
//                 <TableCell>{request.userName}</TableCell>
//                 <TableCell>{request.projectName}</TableCell>
//                 <TableCell>{request.remark}</TableCell>
//                 <TableCell>{request.approved ? "Yes" : "No"}</TableCell>
//                 <TableCell>
//                   <Box display="flex" gap={1}>
//                     <Button
//                       variant="contained"
//                       color="success"
//                       onClick={() => handleApprove(request.id)}
//                       style={{ width: "100px" }}
//                     >
//                       Approve
//                     </Button>
//                     <Button
//                       variant="contained"
//                       color="error"
//                       onClick={() => handleDeny(request.id)}
//                       style={{ width: "100px" }}
//                     >
//                       Deny
//                     </Button>
//                   </Box>
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>
//     </Paper>
//   );
// };

// export default HistoryCards;
